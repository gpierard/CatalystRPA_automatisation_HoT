---
author: "CatalystRPA"
title: "Automation of repetitive tasks"
subtitle: "Using classical programming and Robotic Process Automation"
format: 
  html: 
    embed-resources: true
editor: source
date: last-modified
toc: true
title-block-banner: "#6699ff"
title-block-banner-color: "#ffffff"
published-title: "Last Published"
editor_options: 
  chunk_output_type: console
---

## Introduction 

Even though we are nowadays giving more and more importance to data and data-related tasks, they are absolutely nothing new.

![](images/barley.png)


### Spreadsheet programs

Excel and other spreadsheets were a huge revolution for productivity.

![we've come a long way](images/bill.png)

It was a cornerstone of the early Mac and Windows platforms.


## Programming, scripting, and Robotic Process Automation

Programming knowledge is becoming ever more widespread, and we see many users of Excel migrating towards, mostly, Python and R.

Some call these users "Citizen Developers".

The main use of these tools is for *scripting*, but can be used for programming robust solutions as well as well.

*Scripting* aims at developing solutions that can immediately be valuable, either through automation or data exploration. 

These initial scripts can evolve into more stable programs once the logic is defined.

These scripts are commonly done using the functional programming paradigm rather than object-oriented, although that of course differs from developer to developer.

Python and R are multi-paradigm languages, supporting both of these concepts.

Functional programs decompose complex problems into simple *functions*, while Object-Oriented programs will use simple *objects*. W=What we we will showcase here is functional programming.

### Which tools to choose?

Peu importe le paradigme utilisé, scripting ou OOP, la meilleure méthode pour automatiser les tâches répétitives par une ou plusieurs *applications business* reste d'intéragir avec les ***back-ends*** de ces applications, programmatiquement.

Ca peut être fait soit via des objets comme des stored procedures dans des databases (SQL, RDBMS), soit via du scripting comme python, R etc.

Toutefois, il existe des cas où intéragir programmatiquement de manière classique n'est pas possible comme par exemple quand on a uniquement accès au GUI de programmes comme SAP, où bien à une application web.

Dans ces cas, on est obligé de travailler avec les éléments de l'UI. Typiquement on simule des clicks dans des éléments d'interface graphique.

Dans ces cas, lorsqu'on est obligé de travailler avec une UI, alors on doit utiliser des outils spéciaux comme:

1. Selenium en python (aussi disponible en version R): permet d'automatiser des actions et l'envoi / récupération de données vers un **browser** uniquement: chrome, firefox etc.

2. Les outils de Robotic process automation (RPA) comme UIpath, BluePrism, Automation Anywhere, etc. permettent d'automatiser à la fois les web browsers, ainsi que la plupart des applications bureautiques installées en local comme le client SAP etc.

En conclusion, 

- Si vous pouvez éviter d'utiliser une interface visuelle dans votre solution, faites le. Préférez toujours une intéraction programmatique avec les back-ends des applications comme un premier choix, car cette approche offre la mailleure fiabilité et constance dans les résultats.
- Si vous devez utiliser une interface graphique parce que vous n'avez pas accès aux ressources sous-jacentes à l'application, alors:
  - Si l'interface à utiliser est un navigateur web, vous avez le choix entre Selenium (python ou R) et un outil de Robotic Process Automation comme UIPath.
  - Si l'interface est un programme (client) installé en local, vous devez utliser un outil de RPA comme UIPath


### Note: Python ou R?

R est à notre sens meilleur pour le scripting, la flexibilité du langage offre la possibilité de créer des scripts fonctionnels extrêmement rapidement.

Bien que [de nombreux paradigmes OO sont présents sur R](https://adv-r.hadley.nz/oo.html), leur nombre même rend leur utilisation quelque peu plus difficile qu'en python, car il faut connaître les différents paradigmes OOP présents sur R (S3, S4, R6...) et leurs différences.

C'est d'ailleurs une illustration classique de la différence entre python et R. Là où python impose un cadre relativement stricte, qui rend l'écriture de scripts plus lente qu'avec R, le nombre d'options pour effectuer une opération donnée est beaucoup plus restraint qu'avec R. Cela facilite les décisions en termes de syntaxe, au prix de la flexibilité.

cette flexibilité peut d'ailleurs avoir parfois un prix, et la liberté quasi totale accordée par R peut causer des résultats inattendus, qui seraient identifiés comme une erreur dans python.

Par exemple,

```{python, eval = F}
#| code-fold: false

# PYTHON
mycolumn = list(range(5)) #[0, 1, 2, 3, 4]

# implicit loop on a python list with list comprehension

[10/x for x in mycolumn] # ERROR: ZeroDivisionError: division by zero

```

Python identifie une division par 0 comme une erreur, tandis que R:

```{r , eval = T}
#| code-fold: false

# R
mycolumn = c(0:4)
# in R, many operations are vectorized natively

10/mycolumn # 10/0 = Inf 
```



## Outils

Les 3 principaux outils que nous allons utiliser sont:

### R

![](images/R.png)

Créé en 1993 par Ross Ihaka and Robert Gentleman à Auckland

Totalement Opensource, libre et gratuit d’utilisation dans le domaine commercial.

Nombre de fonctionnalités (librairies) croissant, très utlisé par les scientifiques. 
Outil multitâche, **parfait pour le *scripting* **.



### Python

Langage Orienté-objet créé par l’Hollandais Guido van Rossum en 1991

![](images/python.png)

Comme R, totalement Open-source et multi-plateformes
A notre avis, moins simple que R et moins adapté a des programmes d’automatisation
Par contre, il permet, comme les outils de RPA, la navigation dans des Web-browsers.


### UIPath

Compagnie Roumaine Fondée en 2005 à Bucharest par Daniel Dines and Marius Tîrcă

![](images/uipath.png)

Logiciel closed-source payant (pour les entreprises commerciales) qui ne nécessite pas de connaissance en programmation.
Les programmes sont créés en glissant des activités et les agençant les unes aux autres
L’outil typique de ce qu’on appelle la « RPA »
La seule chose qui est différente entre les outils de RPA et de programmation classiques est la capacite a « espionner » et a manipuler des Interfaces utilisateur sous Windows.


## QUARTO QUICKSTART

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
1 + 1
```


You can add options to executable code like this 

```{r}
#| echo: false
2 * 2
```

```{r reading-data-usp-resample, eval = T}
#| code-fold: true

print("gp: this code block will be folded")

```

The `echo: false` option disables the printing of code (only output is displayed).

