---
author: "CatalystRPA"
title: "Automation of repetitive tasks"
subtitle: "Using classical programming and Robotic Process Automation"
format: 
  html: 
    embed-resources: true
editor: source
date: last-modified
toc: true
title-block-banner: "#6699ff"
title-block-banner-color: "#ffffff"
published-title: "Last Published"
editor_options: 
  chunk_output_type: console
---

## Introduction 

Even though we are nowadays giving more and more importance to data and data-related tasks, they are absolutely nothing new.

![](images/barley.png)


### Spreadsheet programs

Excel and other spreadsheets were a huge revolution for productivity.

![we've come a long way](images/bill.png)

It was a cornerstone of the early Mac and Windows platforms.


## Programming, scripting, and Robotic Process Automation

Programming knowledge is becoming ever more widespread, and we see many users of Excel migrating towards, mostly, Python and R.

Some call these users "Citizen Developers".

The main use of these tools is for *scripting*, but can be used for programming robust solutions as well as well.

*Scripting* aims at developing solutions that can immediately be valuable, either through automation or data exploration. 

These initial scripts can evolve into more stable programs once the logic is defined.

These scripts are commonly done using the functional programming paradigm rather than object-oriented, although that of course differs from developer to developer.

Python and R are multi-paradigm languages, supporting both of these concepts.

Functional programs decompose complex problems into simple *functions*, while Object-Oriented programs will use simple *objects*. W=What we we will showcase here is functional programming.

### Which tools to choose?

Regardless of the paradigm used, scripting or OOP, the best method for automating repetitive tasks by one or more *business applications* remains to interact with the ***back-ends*** of these applications, programmatically.

This can be done either via objects like stored procedures in databases (SQL, RDBMS), or via scripting like python, R etc using APIs.

However, there are cases where interacting programmatically in a "classic way" is not possible, for example when you only have access to the GUI of programs like SAP, or to a web application.

In these cases, we are forced to work with the UI elements. Typically we simulate clicks on graphical interface elements or key pressend on keyboard.

In these cases, when you have to work with a UI, then you have to use special tools like:

1. Selenium in python (also available in R version): allows you to automate actions and the sending / retrieval of data to a **browser** only: Chrome, Firefox etc.

2. Robotic process automation (RPA) tools like UIpath, BluePrism, Automation Anywhere, etc. can automate both web browsers, as well as most office applications installed locally such as the SAP client etc.

In conclusion,

- If you can avoid using a visual interface in your solution, do so. Always prefer programmatic interaction with application backends as a first choice, as this approach offers the most reliability and consistency in results.
- If you must use a GUI because you do not have access to the underlying resources of the application, then:
  -> If the interface to use is a web browser, you have the choice between Selenium (python or R) and a Robotic Process Automation tool like UIPath.
  -> If the interface is a program (client) installed locally, you must use an RPA tool like UIPath

### Note: Python or R?

In our opinion, R is better for scripting, the flexibility of the language offers the possibility of creating functional scripts extremely quickly.

Although [many OO paradigms are present in R](https://adv-r.hadley.nz/oo.html), their sheer number makes them somewhat more difficult to use than in python, because one must know the different OOP paradigms present on R (S3, S4, R6...) and their differences.

This is also a classic illustration of the difference between python and R. Where python imposes a relatively strict framework, which makes writing scripts slower than with R, the number of options to perform a given operation is much more restricted than with R. This makes syntax decisions easier, at the cost of flexibility.

This flexibility can sometimes have a price, and the almost total freedom granted by R can cause unexpected results, which would be identified as an error in python.

For example,

```{python, eval = F}
#| code-fold: false

# PYTHON
mycolumn = list(range(5)) #[0, 1, 2, 3, 4]

# implicit loop on a python list with list comprehension

[10/x for x in mycolumn] # ERROR: ZeroDivisionError: division by zero

```

Python identifies a division by 0 as an error, while R:

```{r , eval = T}
#| code-fold: false

# R
mycolumn = c(0:4)
# in R, many operations are vectorized natively

10/mycolumn # 10/0 = Inf 
```


## Tools

The 3 main tools we will use are:

### R

![](images/R.png)

Created in 1993 by Ross Ihaka and Robert Gentleman in Auckland

Totally Opensource, free and free to use in the commercial domain.

Increasing number of functionalities (libraries), widely used by scientists.
Multitasking tool, **perfect for *scripting* **.


### Python

Object-Oriented Language created by the Dutchman Guido van Rossum in 1991

![](images/python.png)

Like R, completely open-source and multi-platform
In our opinion, less simple than R and less suitable for automation programs
On the other hand, like RPA tools, it allows navigation in Web browsers.

### UIPath

Founded in Romania Founded in 2005 in Bucharest by Daniel Dines and Marius Tîrcă

![](images/uipath.png)

Closed-source software (for commercial businesses), paying licensed, that does not require programming knowledge.
Programs/bots are created by dragging activities and arranging them together
The typical tool of what is called “RPA”
The only thing that is different between traditional RPA and programming tools is the ability to “spy” and manipulate User Interfaces on Windows.


## QUARTO QUICKSTART

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
1 + 1
```


You can add options to executable code like this 

```{r}
#| echo: false
2 * 2
```

```{r reading-data-usp-resample, eval = T}
#| code-fold: true

print("gp: this code block will be folded")

```

The `echo: false` option disables the printing of code (only output is displayed).

